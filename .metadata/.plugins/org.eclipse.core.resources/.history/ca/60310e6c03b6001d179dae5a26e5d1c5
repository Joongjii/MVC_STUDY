{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **딥러닝모델과추론 기말 프로젝트**\n",
    "\n",
    "- 데이터과학융합스쿨 20173259 황현중"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#  **연구 배경과 주제** #\n",
    "\n",
    "####    '다이어트가 습관이 되어야 평생 건강을 유지할 수 있다'라는 말이 있듯이 비만은 평생의 적입니다. ####\n",
    "####     우리가 비만을 두러워해야 하는 이유는 비만은 각종 성인병을 합병증으로 유발하기 때문입니다. #####\n",
    "####     그래서 우리가 알고 있는 많은 성인병 중에 [고혈압, 당뇨, 고콜레스테롤 증상]을 대표로 선정하여, 비만과의 연관성을 분석해보기로 하였습니다 . ####\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AGE</th>\n",
       "      <th>INCM</th>\n",
       "      <th>HE_BMI</th>\n",
       "      <th>HE_GLU</th>\n",
       "      <th>HE_CHOL</th>\n",
       "      <th>HE_TG</th>\n",
       "      <th>HE_SBP</th>\n",
       "      <th>HE_DBP</th>\n",
       "      <th>HE_DM</th>\n",
       "      <th>HE_HP</th>\n",
       "      <th>HE_HCHOL</th>\n",
       "      <th>HE_ANEM</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>20.287970</td>\n",
       "      <td>80.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>19.883911</td>\n",
       "      <td>92.0</td>\n",
       "      <td>235.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>24.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>24.825797</td>\n",
       "      <td>81.0</td>\n",
       "      <td>210.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>21.267022</td>\n",
       "      <td>91.0</td>\n",
       "      <td>175.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>26.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>22.554523</td>\n",
       "      <td>86.0</td>\n",
       "      <td>170.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    AGE  INCM     HE_BMI  HE_GLU  HE_CHOL  HE_TG  HE_SBP  HE_DBP HE_DM HE_HP  \\\n",
       "0  20.0   4.0  20.287970    80.0    172.0   73.0    87.0    55.0     N     N   \n",
       "1  22.0   4.0  19.883911    92.0    235.0   46.0    96.0    72.0     N     N   \n",
       "2  24.0   4.0  24.825797    81.0    210.0   60.0   108.0    57.0     N     N   \n",
       "3  26.0   4.0  21.267022    91.0    175.0   56.0   117.0    75.0     N     N   \n",
       "4  26.0   4.0  22.554523    86.0    170.0   48.0   113.0    64.0     N     N   \n",
       "\n",
       "  HE_HCHOL HE_ANEM  \n",
       "0        N       N  \n",
       "1        N       N  \n",
       "2        N       N  \n",
       "3        N       N  \n",
       "4        N       N  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv('dl-final.csv')\n",
    "df.head()\n",
    "\n",
    "# HN16_ALL.csv 파일에서 프로젝트에 필요한 변수들만 골라 'dl-final.csv'로 저장하였습니다\n",
    "# 당뇨, 고혈압등 합병증여부 데이터들은 유무에따라 0 과 1로 표기 되었지만 각각 N 과 Y로 바꾸어 저장하였습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**`사용한 변수 소개 : AGE(나이), INCM(소득분위 수), HE_BMI(체질량지수),HE_GLU(혈당), HE_CHOl(콜레스테롤), HE_SBP(최종 수축혈압),\n",
    "     HE_DM(당뇨 여부), HE_HP(고혈압 여부), HE_HCHOL(고콜레스테롤 여부)`**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A-1) BMI 지수가 주어졌을때 해당 인원의 최종 수축혈압을 예측하는 회귀분석 모델을 만들고 BMI지수가 비만인 사람의 최종 수축혈압을 예측하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "3951/3951 [==============================] - 9s 2ms/step - loss: 2379.3510\n",
      "Epoch 2/30\n",
      "3951/3951 [==============================] - 7s 2ms/step - loss: 424.6482\n",
      "Epoch 3/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 411.0099\n",
      "Epoch 4/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 385.1343\n",
      "Epoch 5/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 360.9854\n",
      "Epoch 6/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 336.1206\n",
      "Epoch 7/30\n",
      "3951/3951 [==============================] - 4s 1ms/step - loss: 309.4023\n",
      "Epoch 8/30\n",
      "3951/3951 [==============================] - 4s 1ms/step - loss: 280.0558\n",
      "Epoch 9/30\n",
      "3951/3951 [==============================] - 4s 1ms/step - loss: 259.2564\n",
      "Epoch 10/30\n",
      "3951/3951 [==============================] - 4s 1ms/step - loss: 266.7121\n",
      "Epoch 11/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 271.5187\n",
      "Epoch 12/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 267.4828\n",
      "Epoch 13/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 259.2841\n",
      "Epoch 14/30\n",
      "3951/3951 [==============================] - 6s 2ms/step - loss: 266.7418\n",
      "Epoch 15/30\n",
      "3951/3951 [==============================] - 7s 2ms/step - loss: 261.4490\n",
      "Epoch 16/30\n",
      "3951/3951 [==============================] - 8s 2ms/step - loss: 267.5143\n",
      "Epoch 17/30\n",
      "3951/3951 [==============================] - 13s 3ms/step - loss: 263.6604\n",
      "Epoch 18/30\n",
      "3951/3951 [==============================] - 12s 3ms/step - loss: 262.7994\n",
      "Epoch 19/30\n",
      "3951/3951 [==============================] - 12s 3ms/step - loss: 248.9639\n",
      "Epoch 20/30\n",
      "3951/3951 [==============================] - 14s 3ms/step - loss: 252.0270\n",
      "Epoch 21/30\n",
      "3951/3951 [==============================] - 11s 3ms/step - loss: 257.0951\n",
      "Epoch 22/30\n",
      "3951/3951 [==============================] - 12s 3ms/step - loss: 276.0048\n",
      "Epoch 23/30\n",
      "3951/3951 [==============================] - 11s 3ms/step - loss: 267.6030\n",
      "Epoch 24/30\n",
      "3951/3951 [==============================] - 7s 2ms/step - loss: 250.6317\n",
      "Epoch 25/30\n",
      "3951/3951 [==============================] - 7s 2ms/step - loss: 261.5156\n",
      "Epoch 26/30\n",
      "3951/3951 [==============================] - 7s 2ms/step - loss: 256.2959\n",
      "Epoch 27/30\n",
      "3951/3951 [==============================] - 7s 2ms/step - loss: 258.7924\n",
      "Epoch 28/30\n",
      "3951/3951 [==============================] - 6s 2ms/step - loss: 259.7739\n",
      "Epoch 29/30\n",
      "3951/3951 [==============================] - 6s 1ms/step - loss: 269.5712\n",
      "Epoch 30/30\n",
      "3951/3951 [==============================] - 7s 2ms/step - loss: 279.4541\n",
      "[[124.29329]\n",
      " [125.68587]\n",
      " [127.07844]\n",
      " [128.47102]\n",
      " [129.8636 ]\n",
      " [131.2562 ]]\n"
     ]
    }
   ],
   "source": [
    "train_data = df.loc[:3950, ['HE_BMI','HE_SBP']]\n",
    "test_data = df.loc[3950:, ['HE_BMI','HE_SBP']]\n",
    "x_train = train_data.loc[:, 'HE_BMI']\n",
    "y_train = train_data.loc[:, 'HE_SBP']\n",
    "x_test = test_data.loc[:, 'HE_BMI']\n",
    "y_test = test_data.loc[:, 'HE_SBP']\n",
    "#훈련 데이터와 테스트 데이터를 7 대 3 비율로 만들었다\n",
    "#종속변수는 BMI 지수이다\n",
    "model = Sequential()\n",
    "model.add(Dense(32, input_dim=1, activation='relu'))\n",
    "model.add(Dense(16, activation='relu'))\n",
    "model.add(Dense(1))\n",
    "model.compile(loss='mse', optimizer='adam')\n",
    "model.fit(x_train, y_train, batch_size=1, epochs=30)\n",
    "## 에포크 값의 경우 원래 100으로 진행할 예정이였지만, 분석 평가 시 가시성을 위해서 임의로 30으로 설정하였습니다\n",
    "\n",
    "\n",
    "\n",
    "### 비만은 주어진 매뉴얼을 기준으로 BMI 지수가 25이상인 경우로 예측하였다\n",
    "predict_list = [25,26,27,28,29,30]\n",
    "pred = model.predict(predict_list)\n",
    "print(pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**`분석 결과 비만인 사람의 SBP는 124 이상으로 나타나며 BMI 지수가 증가할수록 SBP가 증가하는 것을 알 수 있다`**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A-2) BMI 지수가 주어졌을때, 해당 인원이 고혈압이 있을지를 예측하는 로지스틱 회귀분석(분류 모델)을 만들고 BMI 지수가 비만인 사람은 고혈압이 있을지 여부를 예측하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "3951/3951 [==============================] - 9s 2ms/step - loss: 0.8185 - binary_accuracy: 0.5494\n",
      "Epoch 2/30\n",
      "3951/3951 [==============================] - 9s 2ms/step - loss: 0.6745 - binary_accuracy: 0.5796\n",
      "Epoch 3/30\n",
      "3951/3951 [==============================] - 16s 4ms/step - loss: 0.6641 - binary_accuracy: 0.6003: \n",
      "Epoch 4/30\n",
      "3951/3951 [==============================] - 15s 4ms/step - loss: 0.6622 - binary_accuracy: 0.5897\n",
      "Epoch 5/30\n",
      "3951/3951 [==============================] - 15s 4ms/step - loss: 0.6511 - binary_accuracy: 0.6149: 3s - loss: 0.6511 - binar - ETA: \n",
      "Epoch 6/30\n",
      "3951/3951 [==============================] - 15s 4ms/step - loss: 0.6528 - binary_accuracy: 0.6138\n",
      "Epoch 7/30\n",
      "3951/3951 [==============================] - 14s 3ms/step - loss: 0.6386 - binary_accuracy: 0.6276\n",
      "Epoch 8/30\n",
      "3951/3951 [==============================] - 12s 3ms/step - loss: 0.6411 - binary_accuracy: 0.6307\n",
      "Epoch 9/30\n",
      "3951/3951 [==============================] - 9s 2ms/step - loss: 0.6433 - binary_accuracy: 0.6207\n",
      "Epoch 10/30\n",
      "3951/3951 [==============================] - 7s 2ms/step - loss: 0.6397 - binary_accuracy: 0.6421\n",
      "Epoch 11/30\n",
      "3951/3951 [==============================] - 6s 2ms/step - loss: 0.6328 - binary_accuracy: 0.6531\n",
      "Epoch 12/30\n",
      "3951/3951 [==============================] - 6s 2ms/step - loss: 0.6404 - binary_accuracy: 0.6328\n",
      "Epoch 13/30\n",
      "3951/3951 [==============================] - 6s 2ms/step - loss: 0.6354 - binary_accuracy: 0.6481\n",
      "Epoch 14/30\n",
      "3951/3951 [==============================] - 6s 2ms/step - loss: 0.6390 - binary_accuracy: 0.6446\n",
      "Epoch 15/30\n",
      "3951/3951 [==============================] - 8s 2ms/step - loss: 0.6347 - binary_accuracy: 0.6388\n",
      "Epoch 16/30\n",
      "3951/3951 [==============================] - 8s 2ms/step - loss: 0.6291 - binary_accuracy: 0.6450\n",
      "Epoch 17/30\n",
      "3951/3951 [==============================] - 9s 2ms/step - loss: 0.6368 - binary_accuracy: 0.6299\n",
      "Epoch 18/30\n",
      "3951/3951 [==============================] - 10s 3ms/step - loss: 0.6333 - binary_accuracy: 0.6473\n",
      "Epoch 19/30\n",
      "3951/3951 [==============================] - 13s 3ms/step - loss: 0.6346 - binary_accuracy: 0.6340\n",
      "Epoch 20/30\n",
      "3951/3951 [==============================] - 13s 3ms/step - loss: 0.6374 - binary_accuracy: 0.6367\n",
      "Epoch 21/30\n",
      "3951/3951 [==============================] - 13s 3ms/step - loss: 0.6382 - binary_accuracy: 0.6246: 2s \n",
      "Epoch 22/30\n",
      "3951/3951 [==============================] - 13s 3ms/step - loss: 0.6401 - binary_accuracy: 0.6323: 1s - l\n",
      "Epoch 23/30\n",
      "3951/3951 [==============================] - 15s 4ms/step - loss: 0.6412 - binary_accuracy: 0.6279\n",
      "Epoch 24/30\n",
      "3951/3951 [==============================] - 14s 3ms/step - loss: 0.6365 - binary_accuracy: 0.6295\n",
      "Epoch 25/30\n",
      "3951/3951 [==============================] - 12s 3ms/step - loss: 0.6373 - binary_accuracy: 0.6407\n",
      "Epoch 26/30\n",
      "3951/3951 [==============================] - 8s 2ms/step - loss: 0.6378 - binary_accuracy: 0.6460\n",
      "Epoch 27/30\n",
      "3951/3951 [==============================] - 7s 2ms/step - loss: 0.6381 - binary_accuracy: 0.6424\n",
      "Epoch 28/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 0.6294 - binary_accuracy: 0.6521\n",
      "Epoch 29/30\n",
      "3951/3951 [==============================] - 8s 2ms/step - loss: 0.6367 - binary_accuracy: 0.6488\n",
      "Epoch 30/30\n",
      "3951/3951 [==============================] - 6s 2ms/step - loss: 0.6277 - binary_accuracy: 0.6536\n",
      "[[0.686456  ]\n",
      " [0.7244843 ]\n",
      " [0.75951606]\n",
      " [0.7913763 ]\n",
      " [0.8200157 ]\n",
      " [0.84549123]]\n"
     ]
    }
   ],
   "source": [
    "df['HE_HP'] = df['HE_HP'].map({'N':0, 'Y':1})\n",
    "train_data = df.loc[:3950, ['HE_BMI','HE_HP']]\n",
    "test_data = df.loc[3950:, ['HE_BMI','HE_HP']]\n",
    "x_train = train_data.loc[:, 'HE_BMI']\n",
    "y_train = train_data.loc[:, 'HE_HP']\n",
    "x_test = test_data.loc[:, 'HE_BMI']\n",
    "y_test = test_data.loc[:, 'HE_HP']\n",
    "#훈련 데이터와 테스트 데이터를 7 대 3 비율로 만들었다\n",
    "#종속변수는 BMI 지수이다\n",
    "model = Sequential()\n",
    "model.add(Dense(32, input_dim=1, activation='relu'))\n",
    "model.add(Dense(16, activation='relu'))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "model.compile(optimizer='adam' ,loss='binary_crossentropy', metrics=['binary_accuracy'])\n",
    "model.fit(x_train, y_train, batch_size=1, epochs=30)\n",
    "## 에포크 값의 경우 원래 100으로 진행할 예정이였지만, 분석 평가 시 가시성을 위해서 임의로 30으로 설정하였습니다\n",
    "\n",
    "\n",
    "\n",
    "### 비만은 매뉴얼을 기준으로 BMI 지수가 25이상인 경우로 예측하였다\n",
    "predict_list = [25,26,27,28,29,30]\n",
    "pred = model.predict(predict_list)\n",
    "print(pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**`∴ 분석의 정확도는 약 63%이다. 비만인 사람의 경우 로지스틱 회귀분석(분류 모델) 결과 높은 고혈압이 있을 확률이 높게 나타났다`**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### B-1) BMI 지수가 주어졌을때 해당 인원의 혈당을 예측하는 회귀분석 모델을 만들고 BMI지수가 비만인 사람의 혈당을 예측하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 2148.9182\n",
      "Epoch 2/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 703.2282\n",
      "Epoch 3/30\n",
      "3951/3951 [==============================] - 6s 2ms/step - loss: 671.6385\n",
      "Epoch 4/30\n",
      "3951/3951 [==============================] - 6s 2ms/step - loss: 671.6266\n",
      "Epoch 5/30\n",
      "3951/3951 [==============================] - 7s 2ms/step - loss: 723.6381\n",
      "Epoch 6/30\n",
      "3951/3951 [==============================] - 8s 2ms/step - loss: 660.2171\n",
      "Epoch 7/30\n",
      "3951/3951 [==============================] - 11s 3ms/step - loss: 626.8158: 0s\n",
      "Epoch 8/30\n",
      "3951/3951 [==============================] - 12s 3ms/step - loss: 753.5371\n",
      "Epoch 9/30\n",
      "3951/3951 [==============================] - 11s 3ms/step - loss: 737.3680\n",
      "Epoch 10/30\n",
      "3951/3951 [==============================] - 11s 3ms/step - loss: 794.1598\n",
      "Epoch 11/30\n",
      "3951/3951 [==============================] - 12s 3ms/step - loss: 610.8697\n",
      "Epoch 12/30\n",
      "3951/3951 [==============================] - 10s 2ms/step - loss: 641.4712\n",
      "Epoch 13/30\n",
      "3951/3951 [==============================] - 9s 2ms/step - loss: 610.4444\n",
      "Epoch 14/30\n",
      "3951/3951 [==============================] - 7s 2ms/step - loss: 749.6232\n",
      "Epoch 15/30\n",
      "3951/3951 [==============================] - 6s 1ms/step - loss: 577.2414\n",
      "Epoch 16/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 624.3536\n",
      "Epoch 17/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 685.4831\n",
      "Epoch 18/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 624.3982\n",
      "Epoch 19/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 555.3432\n",
      "Epoch 20/30\n",
      "3951/3951 [==============================] - 4s 1ms/step - loss: 609.9882\n",
      "Epoch 21/30\n",
      "3951/3951 [==============================] - 4s 1ms/step - loss: 574.0843\n",
      "Epoch 22/30\n",
      "3951/3951 [==============================] - 4s 1ms/step - loss: 699.8289\n",
      "Epoch 23/30\n",
      "3951/3951 [==============================] - 4s 1ms/step - loss: 637.4668\n",
      "Epoch 24/30\n",
      "3951/3951 [==============================] - 4s 1ms/step - loss: 622.4916\n",
      "Epoch 25/30\n",
      "3951/3951 [==============================] - 4s 1ms/step - loss: 708.3602\n",
      "Epoch 26/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 467.6582\n",
      "Epoch 27/30\n",
      "3951/3951 [==============================] - 6s 1ms/step - loss: 683.1549\n",
      "Epoch 28/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 652.5539\n",
      "Epoch 29/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 554.2616\n",
      "Epoch 30/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 653.2803\n",
      "[[101.05738]\n",
      " [102.82851]\n",
      " [104.59964]\n",
      " [106.37077]\n",
      " [108.1419 ]\n",
      " [109.91305]]\n"
     ]
    }
   ],
   "source": [
    "train_data = df.loc[:3950, ['HE_BMI','HE_GLU']]\n",
    "test_data = df.loc[3950:, ['HE_BMI','HE_GLU']]\n",
    "x_train = train_data.loc[:, 'HE_BMI']\n",
    "y_train = train_data.loc[:, 'HE_GLU']\n",
    "x_test = test_data.loc[:, 'HE_BMI']\n",
    "y_test = test_data.loc[:, 'HE_GLU']\n",
    "#훈련 데이터와 테스트 데이터를 7 대 3 비율로 만들었다\n",
    "#종속변수는 BMI 지수이다\n",
    "model = Sequential()\n",
    "model.add(Dense(32, input_dim=1, activation='relu'))\n",
    "model.add(Dense(16, activation='relu'))\n",
    "model.add(Dense(1))\n",
    "\n",
    "model.compile(loss='mse', optimizer='adam')\n",
    "model.fit(x_train, y_train, batch_size=1, epochs=30)\n",
    "## 에포크 값의 경우 원래 100으로 진행할 예정이였지만, 분석 평가 시 가시성을 위해서 임의로 30으로 설정하였습니다\n",
    "\n",
    "\n",
    "\n",
    "### 과제에 주어진 매뉴얼을 기준으로 BMI 지수가 25이상인 경우로 예측하였다\n",
    "predict_list = [25,26,27,28,29,30]\n",
    "pred = model.predict(predict_list)\n",
    "print(pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**`분석 결과 비만인 사람의 혈당은 100이상으로 나타나며 BMI 지수가 증가할수록 혈당 수치가 늘어나는 것을 알 수 있다`**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### B-2) BMI 지수가 주어졌을때, 해당 인원이 당뇨가 있을지를 예측하는 로지스틱 회귀분석(분류 모델)을 만들고 BMI 지수가 비만인 사람은 당뇨 있을지 여부를 예측하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "3951/3951 [==============================] - 9s 2ms/step - loss: 0.4506 - binary_accuracy: 0.8525\n",
      "Epoch 2/30\n",
      "3951/3951 [==============================] - 8s 2ms/step - loss: 0.4004 - binary_accuracy: 0.8747\n",
      "Epoch 3/30\n",
      "3951/3951 [==============================] - 14s 4ms/step - loss: 0.3956 - binary_accuracy: 0.8739: 1s - loss: 0.3950 - bi\n",
      "Epoch 4/30\n",
      "3951/3951 [==============================] - 14s 4ms/step - loss: 0.3916 - binary_accuracy: 0.8722\n",
      "Epoch 5/30\n",
      "3951/3951 [==============================] - 14s 4ms/step - loss: 0.3983 - binary_accuracy: 0.8672\n",
      "Epoch 6/30\n",
      "3951/3951 [==============================] - 13s 3ms/step - loss: 0.3897 - binary_accuracy: 0.8701\n",
      "Epoch 7/30\n",
      "3951/3951 [==============================] - 13s 3ms/step - loss: 0.3797 - binary_accuracy: 0.8733\n",
      "Epoch 8/30\n",
      "3951/3951 [==============================] - 12s 3ms/step - loss: 0.3845 - binary_accuracy: 0.8698\n",
      "Epoch 9/30\n",
      "3951/3951 [==============================] - 9s 2ms/step - loss: 0.3853 - binary_accuracy: 0.8687\n",
      "Epoch 10/30\n",
      "3951/3951 [==============================] - 11s 3ms/step - loss: 0.3777 - binary_accuracy: 0.8717\n",
      "Epoch 11/30\n",
      "3951/3951 [==============================] - 9s 2ms/step - loss: 0.3710 - binary_accuracy: 0.8748\n",
      "Epoch 12/30\n",
      "3951/3951 [==============================] - 8s 2ms/step - loss: 0.3881 - binary_accuracy: 0.8650A: 1s - loss: 0.3914  - ETA: 0s - loss: 0.3891 - binary\n",
      "Epoch 13/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 0.3690 - binary_accuracy: 0.8736\n",
      "Epoch 14/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 0.3698 - binary_accuracy: 0.8728\n",
      "Epoch 15/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 0.3847 - binary_accuracy: 0.8653\n",
      "Epoch 16/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 0.3737 - binary_accuracy: 0.8704\n",
      "Epoch 17/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 0.3673 - binary_accuracy: 0.8739\n",
      "Epoch 18/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 0.3775 - binary_accuracy: 0.8682\n",
      "Epoch 19/30\n",
      "3951/3951 [==============================] - 7s 2ms/step - loss: 0.3676 - binary_accuracy: 0.8715\n",
      "Epoch 20/30\n",
      "3951/3951 [==============================] - 6s 2ms/step - loss: 0.3582 - binary_accuracy: 0.8784\n",
      "Epoch 21/30\n",
      "3951/3951 [==============================] - 7s 2ms/step - loss: 0.3757 - binary_accuracy: 0.8678\n",
      "Epoch 22/30\n",
      "3951/3951 [==============================] - 9s 2ms/step - loss: 0.3631 - binary_accuracy: 0.8755\n",
      "Epoch 23/30\n",
      "3951/3951 [==============================] - 11s 3ms/step - loss: 0.3706 - binary_accuracy: 0.8723\n",
      "Epoch 24/30\n",
      "3951/3951 [==============================] - 12s 3ms/step - loss: 0.3641 - binary_accuracy: 0.8766\n",
      "Epoch 25/30\n",
      "3951/3951 [==============================] - 10s 3ms/step - loss: 0.3715 - binary_accuracy: 0.8695\n",
      "Epoch 26/30\n",
      "3951/3951 [==============================] - 12s 3ms/step - loss: 0.3549 - binary_accuracy: 0.8822\n",
      "Epoch 27/30\n",
      "3951/3951 [==============================] - 14s 4ms/step - loss: 0.3567 - binary_accuracy: 0.8785\n",
      "Epoch 28/30\n",
      "3951/3951 [==============================] - 14s 3ms/step - loss: 0.3599 - binary_accuracy: 0.8768\n",
      "Epoch 29/30\n",
      "3951/3951 [==============================] - 11s 3ms/step - loss: 0.3840 - binary_accuracy: 0.8663\n",
      "Epoch 30/30\n",
      "3951/3951 [==============================] - 8s 2ms/step - loss: 0.3634 - binary_accuracy: 0.8745\n",
      "[[0.10207394]\n",
      " [0.10843495]\n",
      " [0.11514151]\n",
      " [0.12220606]\n",
      " [0.12964049]\n",
      " [0.13745642]]\n"
     ]
    }
   ],
   "source": [
    "df['HE_DM'] = df['HE_DM'].map({'N':0, 'Y':1})\n",
    "train_data = df.loc[:3950, ['HE_BMI','HE_DM']]\n",
    "test_data = df.loc[3950:, ['HE_BMI','HE_DM']]\n",
    "x_train = train_data.loc[:, 'HE_BMI']\n",
    "y_train = train_data.loc[:, 'HE_DM']\n",
    "x_test = test_data.loc[:, 'HE_BMI']\n",
    "y_test = test_data.loc[:, 'HE_DM']\n",
    "#훈련 데이터와 테스트 데이터를 7 대 3 비율로 만들었다\n",
    "#종속변수는 BMI 지수이다\n",
    "model = Sequential()\n",
    "model.add(Dense(32, input_dim=1, activation='relu'))\n",
    "model.add(Dense(16, activation='relu'))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "model.compile(optimizer='adam' ,loss='binary_crossentropy', metrics=['binary_accuracy'])\n",
    "model.fit(x_train, y_train, batch_size=1, epochs=30)\n",
    "## 에포크 값의 경우 원래 100으로 진행할 예정이였지만, 분석 평가 시 가시성을 위해서 임의로 30으로 설정하였습니다\n",
    "\n",
    "\n",
    "\n",
    "### 비만은 주어진 매뉴얼을 기준으로 BMI 지수가 25이상인 경우로 예측하였다\n",
    "predict_list = [25,26,27,28,29,30]\n",
    "pred = model.predict(predict_list)\n",
    "print(pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**`∴ 분석의 정확도는 약 87%이다. 비만인 사람의 경우 로지스틱 회귀분석 결과(분류 모델) 높은 당뇨가 없을 확률이 높게 나타났다`**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### C-1) BMI 지수가 주어졌을때 해당 인원의 콜레스테롤을 예측하는 회귀분석 모델을 만들고 BMI지수가 비만인 사람의 콜레스테롤을 예측하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "3951/3951 [==============================] - 10s 2ms/step - loss: 8163.7473\n",
      "Epoch 2/30\n",
      "3951/3951 [==============================] - 17s 4ms/step - loss: 1977.6231\n",
      "Epoch 3/30\n",
      "3951/3951 [==============================] - 15s 4ms/step - loss: 1869.7761\n",
      "Epoch 4/30\n",
      "3951/3951 [==============================] - 12s 3ms/step - loss: 1951.3899\n",
      "Epoch 5/30\n",
      "3951/3951 [==============================] - 15s 4ms/step - loss: 1752.3139\n",
      "Epoch 6/30\n",
      "3951/3951 [==============================] - 21s 5ms/step - loss: 1822.4636\n",
      "Epoch 7/30\n",
      "3951/3951 [==============================] - 20s 5ms/step - loss: 1751.1290 0s - loss: 1\n",
      "Epoch 8/30\n",
      "3951/3951 [==============================] - 10s 2ms/step - loss: 1806.6035\n",
      "Epoch 9/30\n",
      "3951/3951 [==============================] - 8s 2ms/step - loss: 1703.9026\n",
      "Epoch 10/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 1626.1929\n",
      "Epoch 11/30\n",
      "3951/3951 [==============================] - 4s 934us/step - loss: 1584.5048\n",
      "Epoch 12/30\n",
      "3951/3951 [==============================] - 4s 970us/step - loss: 1579.2200\n",
      "Epoch 13/30\n",
      "3951/3951 [==============================] - 4s 972us/step - loss: 1512.1205\n",
      "Epoch 14/30\n",
      "3951/3951 [==============================] - 4s 917us/step - loss: 1483.3904\n",
      "Epoch 15/30\n",
      "3951/3951 [==============================] - 4s 910us/step - loss: 1434.3474\n",
      "Epoch 16/30\n",
      "3951/3951 [==============================] - 3s 883us/step - loss: 1471.5518\n",
      "Epoch 17/30\n",
      "3951/3951 [==============================] - 4s 959us/step - loss: 1424.6493\n",
      "Epoch 18/30\n",
      "3951/3951 [==============================] - 6s 2ms/step - loss: 1472.2147\n",
      "Epoch 19/30\n",
      "3951/3951 [==============================] - 12s 3ms/step - loss: 1444.6002\n",
      "Epoch 20/30\n",
      "3951/3951 [==============================] - 17s 4ms/step - loss: 1451.4111\n",
      "Epoch 21/30\n",
      "3951/3951 [==============================] - 19s 5ms/step - loss: 1436.8421\n",
      "Epoch 22/30\n",
      "3951/3951 [==============================] - 11s 3ms/step - loss: 1462.4168\n",
      "Epoch 23/30\n",
      "3951/3951 [==============================] - 14s 4ms/step - loss: 1388.5079\n",
      "Epoch 24/30\n",
      "3951/3951 [==============================] - 20s 5ms/step - loss: 1480.7665\n",
      "Epoch 25/30\n",
      "3951/3951 [==============================] - 18s 5ms/step - loss: 1528.2215\n",
      "Epoch 26/30\n",
      "3951/3951 [==============================] - 18s 4ms/step - loss: 1432.3837\n",
      "Epoch 27/30\n",
      "3951/3951 [==============================] - 12s 3ms/step - loss: 1457.4327\n",
      "Epoch 28/30\n",
      "3951/3951 [==============================] - 11s 3ms/step - loss: 1386.5414\n",
      "Epoch 29/30\n",
      "3951/3951 [==============================] - 10s 2ms/step - loss: 1351.0188\n",
      "Epoch 30/30\n",
      "3951/3951 [==============================] - 11s 3ms/step - loss: 1433.1445\n",
      "WARNING:tensorflow:5 out of the last 5 calls to <function Model.make_predict_function.<locals>.predict_function at 0x000001FB7435C040> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n",
      "[[193.77223]\n",
      " [194.93774]\n",
      " [196.10326]\n",
      " [197.26878]\n",
      " [198.43431]\n",
      " [199.59985]]\n"
     ]
    }
   ],
   "source": [
    "train_data = df.loc[:3950, ['HE_BMI','HE_CHOL']]\n",
    "test_data = df.loc[3950:, ['HE_BMI','HE_CHOL']]\n",
    "x_train = train_data.loc[:, 'HE_BMI']\n",
    "y_train = train_data.loc[:, 'HE_CHOL']\n",
    "x_test = test_data.loc[:, 'HE_BMI']\n",
    "y_test = test_data.loc[:, 'HE_CHOL']\n",
    "#훈련 데이터와 테스트 데이터를 7 대 3 비율로 만들었다\n",
    "#종속변수는 BMI 지수이다\n",
    "model = Sequential()\n",
    "model.add(Dense(32, input_dim=1, activation='relu'))\n",
    "model.add(Dense(16, activation='relu'))\n",
    "model.add(Dense(1))\n",
    "model.compile(loss='mse', optimizer='adam')\n",
    "model.fit(x_train, y_train, batch_size=1, epochs=30)\n",
    "## 에포크 값의 경우 원래 100으로 진행할 예정이였지만, 분석 평가 시 가시성을 위해서 임의로 30로 설정하였습니다\n",
    "\n",
    "\n",
    "\n",
    "### 비만은 주어진 매뉴얼을 기준으로 BMI 지수가 25이상인 경우로 예측하였다\n",
    "predict_list = [25,26,27,28,29,30]\n",
    "pred = model.predict(predict_list)\n",
    "print(pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**`분석 결과 비만인 사람들은 모두 콜레스테롤 수치가 200 이하로 나타나며 BMI 지수가 증가할수록 BMI 지수가 늘어나는 것을 알 수 있다`**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### C-2) BMI 지수가 주어졌을때, 해당 인원이 고콜레스테롤증상 있을지를 예측하는 로지스틱 회귀분석(분류 모델)을 만들고 BMI 지수가 비만인 사람은 고콜레스테롤증상이 있을지 여부를 예측하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "3951/3951 [==============================] - 8s 2ms/step - loss: 0.5497 - binary_accuracy: 0.7884\n",
      "Epoch 2/30\n",
      "3951/3951 [==============================] - 7s 2ms/step - loss: 0.5405 - binary_accuracy: 0.7880A: 0s - loss: \n",
      "Epoch 3/30\n",
      "3951/3951 [==============================] - 10s 2ms/step - loss: 0.5175 - binary_accuracy: 0.7969\n",
      "Epoch 4/30\n",
      "3951/3951 [==============================] - 6s 1ms/step - loss: 0.5153 - binary_accuracy: 0.7985\n",
      "Epoch 5/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 0.5195 - binary_accuracy: 0.7929\n",
      "Epoch 6/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 0.5186 - binary_accuracy: 0.7920\n",
      "Epoch 7/30\n",
      "3951/3951 [==============================] - 4s 1ms/step - loss: 0.5320 - binary_accuracy: 0.7782\n",
      "Epoch 8/30\n",
      "3951/3951 [==============================] - 4s 946us/step - loss: 0.5272 - binary_accuracy: 0.7826\n",
      "Epoch 9/30\n",
      "3951/3951 [==============================] - 4s 915us/step - loss: 0.5225 - binary_accuracy: 0.7830\n",
      "Epoch 10/30\n",
      "3951/3951 [==============================] - 4s 917us/step - loss: 0.4928 - binary_accuracy: 0.8034\n",
      "Epoch 11/30\n",
      "3951/3951 [==============================] - 4s 893us/step - loss: 0.5141 - binary_accuracy: 0.7872\n",
      "Epoch 12/30\n",
      "3951/3951 [==============================] - 3s 880us/step - loss: 0.5310 - binary_accuracy: 0.7726\n",
      "Epoch 13/30\n",
      "3951/3951 [==============================] - 4s 890us/step - loss: 0.5187 - binary_accuracy: 0.7818\n",
      "Epoch 14/30\n",
      "3951/3951 [==============================] - 3s 882us/step - loss: 0.5135 - binary_accuracy: 0.7853\n",
      "Epoch 15/30\n",
      "3951/3951 [==============================] - 4s 922us/step - loss: 0.5100 - binary_accuracy: 0.7886\n",
      "Epoch 16/30\n",
      "3951/3951 [==============================] - 4s 1ms/step - loss: 0.5118 - binary_accuracy: 0.7875\n",
      "Epoch 17/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 0.5116 - binary_accuracy: 0.7863\n",
      "Epoch 18/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 0.5129 - binary_accuracy: 0.7838\n",
      "Epoch 19/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 0.5171 - binary_accuracy: 0.7802\n",
      "Epoch 20/30\n",
      "3951/3951 [==============================] - 5s 1ms/step - loss: 0.4979 - binary_accuracy: 0.7929\n",
      "Epoch 21/30\n",
      "3951/3951 [==============================] - 9s 2ms/step - loss: 0.5028 - binary_accuracy: 0.7890\n",
      "Epoch 22/30\n",
      "3951/3951 [==============================] - 6s 2ms/step - loss: 0.5209 - binary_accuracy: 0.7774\n",
      "Epoch 23/30\n",
      "3951/3951 [==============================] - 7s 2ms/step - loss: 0.5094 - binary_accuracy: 0.7877\n",
      "Epoch 24/30\n",
      "3951/3951 [==============================] - 6s 2ms/step - loss: 0.5067 - binary_accuracy: 0.7894\n",
      "Epoch 25/30\n",
      "3951/3951 [==============================] - 7s 2ms/step - loss: 0.5056 - binary_accuracy: 0.7887\n",
      "Epoch 26/30\n",
      "3951/3951 [==============================] - 12s 3ms/step - loss: 0.5112 - binary_accuracy: 0.7870\n",
      "Epoch 27/30\n",
      "3951/3951 [==============================] - 13s 3ms/step - loss: 0.5081 - binary_accuracy: 0.7844\n",
      "Epoch 28/30\n",
      "3951/3951 [==============================] - 14s 4ms/step - loss: 0.5125 - binary_accuracy: 0.7804\n",
      "Epoch 29/30\n",
      "3951/3951 [==============================] - 12s 3ms/step - loss: 0.4941 - binary_accuracy: 0.7948\n",
      "Epoch 30/30\n",
      "3951/3951 [==============================] - 11s 3ms/step - loss: 0.5001 - binary_accuracy: 0.7907: 4s\n",
      "WARNING:tensorflow:6 out of the last 6 calls to <function Model.make_predict_function.<locals>.predict_function at 0x000001FB710D5AF0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n",
      "[[0.26119357]\n",
      " [0.26850381]\n",
      " [0.27594227]\n",
      " [0.2835069 ]\n",
      " [0.2911955 ]\n",
      " [0.29900566]]\n"
     ]
    }
   ],
   "source": [
    "df['HE_HCHOL'] = df['HE_HCHOL'].map({'N':0, 'Y':1})\n",
    "train_data = df.loc[:3950, ['HE_BMI','HE_HCHOL']]\n",
    "test_data = df.loc[3950:, ['HE_BMI','HE_HCHOL']]\n",
    "x_train = train_data.loc[:, 'HE_BMI']\n",
    "y_train = train_data.loc[:, 'HE_HCHOL']\n",
    "x_test = test_data.loc[:, 'HE_BMI']\n",
    "y_test = test_data.loc[:, 'HE_HCHOL']\n",
    "#훈련 데이터와 테스트 데이터를 7 대 3 비율로 만들었다\n",
    "#종속변수는 BMI 지수이다\n",
    "model = Sequential()\n",
    "model.add(Dense(32, input_dim=1, activation='relu'))\n",
    "model.add(Dense(16, activation='relu'))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "model.compile(optimizer='adam' ,loss='binary_crossentropy', metrics=['binary_accuracy'])\n",
    "model.fit(x_train, y_train, batch_size=1, epochs=30)\n",
    "## 에포크 값의 경우 원래 100으로 진행할 예정이였지만, 분석 평가시 가시성을 위해서 임의로 30로 설정하였습니다\n",
    "\n",
    "\n",
    "\n",
    "### 비만인 사람의 SBP는 주어진 매뉴얼을 기준으로 BMI 지수가 25이상인 경우로 예측하였다\n",
    "predict_list = [25,26,27,28,29,30]\n",
    "pred = model.predict(predict_list)\n",
    "print(pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**`∴ 분석의 정확도는 약 78%이다. 비만인 사람의 경우 로지스틱 회귀분석 결과 높은 고콜레스테롤증상이 없을 확률이 높게 나타났다`**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#  ∴**결론** #\n",
    "###     혈당, 콜레스테롤, 혈압은 BMI 지수가 높아질수록 증가하는 모습을 보인다. ###\n",
    "###     하지만, 3 변수 모두 비만과 연관이 있는 것은 아니였다. ###\n",
    "###     비만과 가장 연관이 높은 합병증은 고혈압으로 분석되었으며, 당뇨는 가장 연관이 적은 것으로 나타난다. ###\n",
    "###     의외로 고콜레스테롤 증상이 비만과 연관성이 적은 것으로 나타났다. ###\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
